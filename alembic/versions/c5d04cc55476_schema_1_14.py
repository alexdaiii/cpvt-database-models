"""schema_1.14

Revision ID: c5d04cc55476
Revises: 1f355f80cd00
Create Date: 2024-04-19 16:03:37.546546

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c5d04cc55476"
down_revision: Union[str, None] = "1f355f80cd00"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "clinical_significance",
        sa.Column("clinical_significance_id", sa.Integer(), nullable=False),
        sa.Column(
            "clinical_significance", postgresql.CITEXT(), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "clinical_significance_id", name=op.f("pk_clinical_significance")
        ),
        sa.UniqueConstraint(
            "clinical_significance",
            name=op.f("uq_clinical_significance_clinical_significance"),
        ),
        comment="Clinical significance of a variant",
    )
    op.create_table(
        "condition",
        sa.Column(
            "condition_id",
            sa.Integer(),
            nullable=False,
            comment="Primary key for the health_state table",
        ),
        sa.Column("condition", postgresql.CITEXT(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("condition_id", name=op.f("pk_condition")),
        sa.UniqueConstraint("condition", name=op.f("uq_condition_condition")),
    )
    op.create_table(
        "edit_type",
        sa.Column("edit_type_id", sa.Integer(), nullable=False),
        sa.Column("name", postgresql.CITEXT(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("edit_type_id", name=op.f("pk_edit_type")),
        sa.UniqueConstraint("name", name=op.f("uq_edit_type_name")),
        comment="What the mutation does at the molecular level - e.g. missense, nonsense, frameshift, etc.",
    )
    op.create_table(
        "individual_sex",
        sa.Column("individual_sex_id", sa.Integer(), nullable=False),
        sa.Column("value", postgresql.CITEXT(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "individual_sex_id", name=op.f("pk_individual_sex")
        ),
        sa.UniqueConstraint("value", name=op.f("uq_individual_sex_value")),
    )
    op.create_table(
        "kinship_name",
        sa.Column("kinship_name_id", sa.Integer(), nullable=False),
        sa.Column(
            "name",
            postgresql.CITEXT(),
            nullable=False,
            comment="Biological kinship name",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "kinship_name_id", name=op.f("pk_kinship_name")
        ),
        sa.UniqueConstraint("name", name=op.f("uq_kinship_name_name")),
    )
    op.create_table(
        "pathogenicity_predictor",
        sa.Column("predictor_id", sa.Integer(), nullable=False),
        sa.Column("model", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "predictor_id", name=op.f("pk_pathogenicity_predictor")
        ),
        sa.UniqueConstraint(
            "model", name=op.f("uq_pathogenicity_predictor_model")
        ),
        comment="Pathogenicity predictor models",
    )
    op.create_table(
        "publication",
        sa.Column("publication_id", sa.Integer(), nullable=False),
        sa.Column("title", postgresql.CITEXT(), nullable=True),
        sa.Column("first_author", postgresql.CITEXT(), nullable=True),
        sa.Column("pmid", sa.Integer(), nullable=True),
        sa.Column("reference", sa.String(), nullable=True),
        sa.Column("doi", sa.String(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "doi IS NULL OR (doi ~ '^10.\\d{4,9}/[-._;()/:\\w]+$')",
            name=op.f("ck_publication_publication_doi_regex"),
        ),
        sa.CheckConstraint(
            "NOT (title IS NULL AND first_author IS NULL AND pmid IS NULL AND reference IS NULL AND year IS NULL AND doi IS NULL)",
            name=op.f("ck_publication_row_not_null"),
        ),
        sa.CheckConstraint(
            "pmid IS NULL OR (pmid > 0)",
            name=op.f("ck_publication_publication_pmid_positive"),
        ),
        sa.PrimaryKeyConstraint("publication_id", name=op.f("pk_publication")),
        sa.UniqueConstraint("doi", name=op.f("uq_publication_doi")),
        sa.UniqueConstraint("pmid", name=op.f("uq_publication_pmid")),
        sa.UniqueConstraint(
            "reference", name=op.f("uq_publication_reference")
        ),
    )
    op.create_table(
        "structure_root",
        sa.Column("structure_root_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "structure_root_id", name=op.f("pk_structure_root")
        ),
    )
    op.create_table(
        "treatment",
        sa.Column("treatment_id", sa.Integer(), nullable=False),
        sa.Column("treatment_name", postgresql.CITEXT(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("treatment_id", name=op.f("pk_treatment")),
        sa.UniqueConstraint(
            "treatment_name", name=op.f("uq_treatment_treatment_name")
        ),
        comment="Treatments that patients were given",
    )
    op.create_table(
        "variant_inheritance",
        sa.Column("variant_inheritance_id", sa.Integer(), nullable=False),
        sa.Column("variant_inheritance", postgresql.CITEXT(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "variant_inheritance_id", name=op.f("pk_variant_inheritance")
        ),
        sa.UniqueConstraint(
            "variant_inheritance",
            name=op.f("uq_variant_inheritance_variant_inheritance"),
        ),
        comment="Was the mutation was inherited or was spontaneous",
    )
    op.create_table(
        "variants_dataset",
        sa.Column("dataset_id", sa.Integer(), nullable=False),
        sa.Column("name", postgresql.CITEXT(), nullable=False),
        sa.Column("description", postgresql.CITEXT(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "dataset_id", name=op.f("pk_variants_dataset")
        ),
        sa.UniqueConstraint("name", name=op.f("uq_variants_dataset_name")),
        comment="Information about a dataset of variants",
    )
    op.create_table(
        "zygosity",
        sa.Column("zygosity_id", sa.Integer(), nullable=False),
        sa.Column("zygosity", postgresql.CITEXT(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("zygosity_id", name=op.f("pk_zygosity")),
        sa.UniqueConstraint("zygosity", name=op.f("uq_zygosity_zygosity")),
        comment="Is the mutation on the individual heterozygous or homozygous",
    )
    op.create_table(
        "condition_synonym",
        sa.Column(
            "condition_synonym_id",
            sa.Integer(),
            nullable=False,
            comment="Primary key for the health_state_synonym table",
        ),
        sa.Column(
            "condition_id",
            sa.Integer(),
            nullable=False,
            comment="The condition that the synonym is for",
        ),
        sa.Column("synonym", postgresql.CITEXT(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["condition_id"],
            ["condition.condition_id"],
            name=op.f("fk_condition_synonym_condition_id_condition"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "condition_synonym_id", name=op.f("pk_condition_synonym")
        ),
    )
    op.create_index(
        op.f("ix_condition_synonym_condition_id"),
        "condition_synonym",
        ["condition_id"],
        unique=False,
    )
    op.create_table(
        "individual",
        sa.Column("individual_id", sa.Integer(), nullable=False),
        sa.Column("individual_sex_id", sa.Integer(), nullable=True),
        sa.Column(
            "extra_information",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["individual_sex_id"],
            ["individual_sex.individual_sex_id"],
            name=op.f("fk_individual_individual_sex_id_individual_sex"),
        ),
        sa.PrimaryKeyConstraint("individual_id", name=op.f("pk_individual")),
        comment="Contains information about an individual",
    )
    op.create_index(
        op.f("ix_individual_individual_sex_id"),
        "individual",
        ["individual_sex_id"],
        unique=False,
    )
    op.create_table(
        "sequence_variant",
        sa.Column(
            "sequence_variant_id",
            sa.Integer(),
            nullable=False,
            comment="Primary key for the sequence variant",
        ),
        sa.Column(
            "g_reference_sequence_id",
            sa.Integer(),
            nullable=True,
            comment="The reference sequence from the UTA database. Foreign key to seq_anno.seq_anno_id, which contains the reference sequence names.",
        ),
        sa.Column(
            "g_edit_type",
            sa.Integer(),
            nullable=True,
            comment="The edit type for the sequence variant. ",
        ),
        sa.Column(
            "g_posedit_str",
            sa.String(),
            nullable=True,
            comment="For protein sequences. The posedit string.",
        ),
        sa.Column(
            "g_pos_interval",
            postgresql.INT4RANGE(),
            nullable=True,
            comment="From an hgvs PosEdit.pos object. This is the pos.start.base and the pos.end.base values.",
        ),
        sa.Column(
            "g_edit_ref",
            sa.String(),
            nullable=True,
            comment="From an hgvs Edit object. The edit.ref value.",
        ),
        sa.Column(
            "g_edit_alt",
            sa.String(),
            nullable=True,
            comment="From an hgvs Edit object. The edit.alt value.",
        ),
        sa.Column(
            "g_hgvs_string",
            sa.String(),
            nullable=True,
            comment="The normalized hgvs string for the sequence variant",
        ),
        sa.Column(
            "c_reference_sequence_id",
            sa.Integer(),
            nullable=True,
            comment="The reference sequence from the UTA database. Foreign key to seq_anno.seq_anno_id, which contains the reference sequence names.",
        ),
        sa.Column(
            "c_edit_type",
            sa.Integer(),
            nullable=True,
            comment="The edit type for the sequence variant. ",
        ),
        sa.Column(
            "c_posedit_str",
            sa.String(),
            nullable=True,
            comment="For protein sequences. The posedit string.",
        ),
        sa.Column(
            "c_pos_interval",
            postgresql.INT4RANGE(),
            nullable=True,
            comment="From an hgvs PosEdit.pos object. This is the pos.start.base and the pos.end.base values.",
        ),
        sa.Column(
            "c_start_offset",
            sa.Integer(),
            nullable=True,
            comment="For cDNA sequences intronic variants. Otherwise null.",
        ),
        sa.Column(
            "c_end_offset",
            sa.Integer(),
            nullable=True,
            comment="For cDNA sequences intronic variants. Otherwise null.",
        ),
        sa.Column(
            "c_edit_ref",
            sa.String(),
            nullable=True,
            comment="From an hgvs Edit object. The edit.ref value.",
        ),
        sa.Column(
            "c_edit_alt",
            sa.String(),
            nullable=True,
            comment="From an hgvs Edit object. The edit.alt value.",
        ),
        sa.Column(
            "c_hgvs_string",
            sa.String(),
            nullable=True,
            comment="The normalized hgvs string for the sequence variant",
        ),
        sa.Column(
            "p_reference_sequence_id",
            sa.Integer(),
            nullable=True,
            comment="The reference sequence from the UTA database. Foreign key to seq_anno.seq_anno_id, which contains the reference sequence names.",
        ),
        sa.Column(
            "p_edit_type",
            sa.Integer(),
            nullable=True,
            comment="The edit type for the sequence variant. ",
        ),
        sa.Column(
            "p_posedit_str",
            sa.String(),
            nullable=True,
            comment="For protein sequences. The posedit string.",
        ),
        sa.Column(
            "p_pos_interval",
            postgresql.INT4RANGE(),
            nullable=True,
            comment="From an hgvs PosEdit.pos object. This is the pos.start.base and the pos.end.base values.",
        ),
        sa.Column(
            "p_start_aa",
            sa.String(),
            nullable=True,
            comment="For protein sequences. The start amino acid. Equivalent to edit.ref, for non protein sequences.",
        ),
        sa.Column(
            "p_end_aa",
            sa.String(),
            nullable=True,
            comment="For protein sequences. The end amino acid.Equivalent to edit.alt, for non protein sequences.",
        ),
        sa.Column(
            "p_edit_ref",
            sa.String(),
            nullable=True,
            comment="From an hgvs Edit object. The edit.ref value.",
        ),
        sa.Column(
            "p_edit_alt",
            sa.String(),
            nullable=True,
            comment="From an hgvs Edit object. The edit.alt value.",
        ),
        sa.Column(
            "p_edit_init_met",
            sa.Boolean(),
            nullable=True,
            comment="From an hgvs Edit object. The edit.init_met value.",
        ),
        sa.Column(
            "p_hgvs_string",
            sa.String(),
            nullable=True,
            comment="The normalized hgvs string for the sequence variant",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "g_hgvs_string IS NOT NULL OR c_hgvs_string IS NOT NULL OR p_hgvs_string IS NOT NULL",
            name=op.f("ck_sequence_variant_ck_sequence_variant_hgvs_strings"),
        ),
        sa.ForeignKeyConstraint(
            ["c_edit_type"],
            ["edit_type.edit_type_id"],
            name=op.f("fk_sequence_variant_c_edit_type_edit_type"),
        ),
        sa.ForeignKeyConstraint(
            ["c_reference_sequence_id"],
            ["uta.seq_anno.seq_anno_id"],
            name=op.f("fk_sequence_variant_c_reference_sequence_id_seq_anno"),
        ),
        sa.ForeignKeyConstraint(
            ["g_edit_type"],
            ["edit_type.edit_type_id"],
            name=op.f("fk_sequence_variant_g_edit_type_edit_type"),
        ),
        sa.ForeignKeyConstraint(
            ["g_reference_sequence_id"],
            ["uta.seq_anno.seq_anno_id"],
            name=op.f("fk_sequence_variant_g_reference_sequence_id_seq_anno"),
        ),
        sa.ForeignKeyConstraint(
            ["p_edit_type"],
            ["edit_type.edit_type_id"],
            name=op.f("fk_sequence_variant_p_edit_type_edit_type"),
        ),
        sa.ForeignKeyConstraint(
            ["p_reference_sequence_id"],
            ["uta.seq_anno.seq_anno_id"],
            name=op.f("fk_sequence_variant_p_reference_sequence_id_seq_anno"),
        ),
        sa.PrimaryKeyConstraint(
            "sequence_variant_id", name=op.f("pk_sequence_variant")
        ),
        sa.UniqueConstraint(
            "g_hgvs_string",
            "c_hgvs_string",
            "p_hgvs_string",
            name="uq_sequence_variant_hgvs_strings",
        ),
        comment="A sequence variant parsed and validated by the python or rust hgvs library.",
    )
    op.create_index(
        "idx_sequence_variant_c_pos_interval",
        "sequence_variant",
        ["c_pos_interval"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_index(
        "idx_sequence_variant_g_pos_interval",
        "sequence_variant",
        ["g_pos_interval"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_index(
        "idx_sequence_variant_p_pos_interval",
        "sequence_variant",
        ["p_pos_interval"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_index(
        op.f("ix_sequence_variant_c_edit_alt"),
        "sequence_variant",
        ["c_edit_alt"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_c_edit_ref"),
        "sequence_variant",
        ["c_edit_ref"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_c_edit_type"),
        "sequence_variant",
        ["c_edit_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_c_hgvs_string"),
        "sequence_variant",
        ["c_hgvs_string"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_c_posedit_str"),
        "sequence_variant",
        ["c_posedit_str"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_c_reference_sequence_id"),
        "sequence_variant",
        ["c_reference_sequence_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_g_edit_alt"),
        "sequence_variant",
        ["g_edit_alt"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_g_edit_ref"),
        "sequence_variant",
        ["g_edit_ref"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_g_edit_type"),
        "sequence_variant",
        ["g_edit_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_g_hgvs_string"),
        "sequence_variant",
        ["g_hgvs_string"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_g_posedit_str"),
        "sequence_variant",
        ["g_posedit_str"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_g_reference_sequence_id"),
        "sequence_variant",
        ["g_reference_sequence_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_p_edit_type"),
        "sequence_variant",
        ["p_edit_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_p_hgvs_string"),
        "sequence_variant",
        ["p_hgvs_string"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_p_posedit_str"),
        "sequence_variant",
        ["p_posedit_str"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sequence_variant_p_reference_sequence_id"),
        "sequence_variant",
        ["p_reference_sequence_id"],
        unique=False,
    )
    op.create_table(
        "structure",
        sa.Column("structure_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=True),
        sa.Column(
            "parent_id",
            sa.Integer(),
            nullable=True,
            comment="The parent structure for this structure.",
        ),
        sa.Column(
            "root_id",
            sa.Integer(),
            nullable=False,
            comment="The root structure for this structure. WARNING: There is no check that this root is actually a root of the tree.",
        ),
        sa.Column("residue_span", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "parent_id != structure_id",
            name=op.f("ck_structure_structure_parent_id_ne_structure_id"),
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["structure.structure_id"],
            name=op.f("fk_structure_parent_id_structure"),
        ),
        sa.ForeignKeyConstraint(
            ["root_id"],
            ["structure_root.structure_root_id"],
            name=op.f("fk_structure_root_id_structure_root"),
        ),
        sa.PrimaryKeyConstraint("structure_id", name=op.f("pk_structure")),
        sa.UniqueConstraint("name", name=op.f("uq_structure_name")),
        sa.UniqueConstraint("symbol", name=op.f("uq_structure_symbol")),
    )
    op.create_index(
        op.f("ix_structure_parent_id"),
        "structure",
        ["parent_id"],
        unique=False,
    )
    op.create_index(
        "ix_structure_residue_span",
        "structure",
        ["residue_span"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_index(
        op.f("ix_structure_root_id"), "structure", ["root_id"], unique=False
    )
    op.create_table(
        "structure_root_to_protein",
        sa.Column("structure_root_id", sa.Integer(), nullable=False),
        sa.Column("protein_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["protein_id"],
            ["uta.seq_anno.seq_anno_id"],
            name=op.f("fk_structure_root_to_protein_protein_id_seq_anno"),
        ),
        sa.ForeignKeyConstraint(
            ["structure_root_id"],
            ["structure_root.structure_root_id"],
            name=op.f(
                "fk_structure_root_to_protein_structure_root_id_structure_root"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "structure_root_id", name=op.f("pk_structure_root_to_protein")
        ),
        comment="Which proteins are associated with which structure roots.",
    )
    op.create_index(
        op.f("ix_structure_root_to_protein_protein_id"),
        "structure_root_to_protein",
        ["protein_id"],
        unique=False,
    )
    op.create_table(
        "family_history_record",
        sa.Column("family_history_record_id", sa.Integer(), nullable=False),
        sa.Column("individual_id", sa.Integer(), nullable=False),
        sa.Column("condition_id", sa.Integer(), nullable=False),
        sa.Column(
            "num_family_members",
            sa.Integer(),
            nullable=True,
            comment="The number of family members with the condition. If this number is 0, then no family members have the condition. Recorded as number if the actual kinship is not known.",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "num_family_members >= 0",
            name=op.f("ck_family_history_record_num_members_gte_0"),
        ),
        sa.ForeignKeyConstraint(
            ["condition_id"],
            ["condition.condition_id"],
            name=op.f("fk_family_history_record_condition_id_condition"),
        ),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.individual_id"],
            name=op.f("fk_family_history_record_individual_id_individual"),
        ),
        sa.PrimaryKeyConstraint(
            "family_history_record_id", name=op.f("pk_family_history_record")
        ),
        sa.UniqueConstraint(
            "individual_id",
            "condition_id",
            name=op.f("uq_family_history_record_individual_id"),
        ),
    )
    op.create_index(
        op.f("ix_family_history_record_condition_id"),
        "family_history_record",
        ["condition_id"],
        unique=False,
    )
    op.create_table(
        "individual_condition",
        sa.Column(
            "individual_id",
            sa.Integer(),
            nullable=False,
            comment="The individual who has a record of this condition",
        ),
        sa.Column(
            "condition_id",
            sa.Integer(),
            nullable=False,
            comment="The condition that the patient has a record of",
        ),
        sa.Column(
            "has_condition",
            sa.Boolean(),
            nullable=True,
            comment="Does the patient have this condition?",
        ),
        sa.Column(
            "description",
            postgresql.CITEXT(),
            nullable=True,
            comment="The description of the patient's condition",
        ),
        sa.Column(
            "age_of_onset",
            sa.Float(),
            nullable=True,
            comment="The age in years, when a patient first started experiencing this condition",
        ),
        sa.Column(
            "age_of_presentation",
            sa.Float(),
            nullable=True,
            comment="The age in years, when a person first presented this condition to a healthcare professional",
        ),
        sa.Column(
            "onset_symptoms",
            sa.String(),
            nullable=True,
            comment="The symptoms that the patient experienced when they first started experiencing this condition",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "age_of_onset >= 0",
            name=op.f("ck_individual_condition_age_of_onset_not_negative"),
        ),
        sa.CheckConstraint(
            "age_of_presentation >= 0",
            name=op.f(
                "ck_individual_condition_age_of_presentation_not_negative"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["condition_id"],
            ["condition.condition_id"],
            name=op.f("fk_individual_condition_condition_id_condition"),
        ),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.individual_id"],
            name=op.f("fk_individual_condition_individual_id_individual"),
        ),
        sa.PrimaryKeyConstraint(
            "individual_id",
            "condition_id",
            name=op.f("pk_individual_condition"),
        ),
        comment="An association table between individuals and conditions that representsa record that an individual has reported having this condition or not",
    )
    op.create_index(
        op.f("ix_individual_condition_age_of_onset"),
        "individual_condition",
        ["age_of_onset"],
        unique=False,
    )
    op.create_index(
        op.f("ix_individual_condition_age_of_presentation"),
        "individual_condition",
        ["age_of_presentation"],
        unique=False,
    )
    op.create_index(
        op.f("ix_individual_condition_condition_id"),
        "individual_condition",
        ["condition_id"],
        unique=False,
    )
    op.create_table(
        "individual_original_excel_row",
        sa.Column("individual_id", sa.Integer(), nullable=False),
        sa.Column(
            "original_row",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.individual_id"],
            name=op.f(
                "fk_individual_original_excel_row_individual_id_individual"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "individual_id", name=op.f("pk_individual_original_excel_row")
        ),
        comment="Contains the original row from the excel file",
    )
    op.create_table(
        "individual_to_publication",
        sa.Column("individual_id", sa.Integer(), nullable=False),
        sa.Column("publication_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.individual_id"],
            name=op.f("fk_individual_to_publication_individual_id_individual"),
        ),
        sa.ForeignKeyConstraint(
            ["publication_id"],
            ["publication.publication_id"],
            name=op.f(
                "fk_individual_to_publication_publication_id_publication"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "individual_id",
            "publication_id",
            name=op.f("pk_individual_to_publication"),
        ),
        comment="Many-to-many relationship between individual and publication",
    )
    op.create_index(
        op.f("ix_individual_to_publication_publication_id"),
        "individual_to_publication",
        ["publication_id"],
        unique=False,
    )
    op.create_table(
        "treatment_record",
        sa.Column("patient_id", sa.Integer(), nullable=False),
        sa.Column("treatment_id", sa.Integer(), nullable=False),
        sa.Column(
            "treatment_taken",
            sa.Boolean(),
            nullable=False,
            comment="Was the treatment taken?",
        ),
        sa.Column(
            "effective",
            sa.Boolean(),
            nullable=True,
            comment="Was the treatment effective?",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["patient_id"],
            ["individual.individual_id"],
            name=op.f("fk_treatment_record_patient_id_individual"),
        ),
        sa.ForeignKeyConstraint(
            ["treatment_id"],
            ["treatment.treatment_id"],
            name=op.f("fk_treatment_record_treatment_id_treatment"),
        ),
        sa.PrimaryKeyConstraint(
            "patient_id", "treatment_id", name=op.f("pk_treatment_record")
        ),
        comment="Records of treatments that individuals were given",
    )
    op.create_index(
        op.f("ix_treatment_record_treatment_id"),
        "treatment_record",
        ["treatment_id"],
        unique=False,
    )
    op.create_table(
        "variant",
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column(
            "hgvs_string",
            sa.String(),
            nullable=False,
            comment="HGVS string. Can use any reference sequence.",
        ),
        sa.Column(
            "hgvs_string_definitely_invalid",
            sa.Boolean(),
            nullable=False,
            comment="Whether the HGVS string is NOT parsable. A parsable HGVS string is one that can be made into a SequenceVariant (in the sequence_variant table). If this is true, then the string is invalid and not parsable.",
        ),
        sa.Column("clinical_significance_id", sa.Integer(), nullable=True),
        sa.Column("sequence_variant_id", sa.Integer(), nullable=True),
        sa.Column(
            "extra_information",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["clinical_significance_id"],
            ["clinical_significance.clinical_significance_id"],
            name=op.f(
                "fk_variant_clinical_significance_id_clinical_significance"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["sequence_variant_id"],
            ["sequence_variant.sequence_variant_id"],
            name=op.f("fk_variant_sequence_variant_id_sequence_variant"),
        ),
        sa.PrimaryKeyConstraint("variant_id", name=op.f("pk_variant")),
        sa.UniqueConstraint(
            "hgvs_string", name=op.f("uq_variant_hgvs_string")
        ),
    )
    op.create_index(
        op.f("ix_variant_clinical_significance_id"),
        "variant",
        ["clinical_significance_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_variant_sequence_variant_id"),
        "variant",
        ["sequence_variant_id"],
        unique=False,
    )
    op.create_table(
        "clinvar_variant_linked_condition",
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column("condition_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["condition_id"],
            ["condition.condition_id"],
            name=op.f(
                "fk_clinvar_variant_linked_condition_condition_id_condition"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["variant_id"],
            ["variant.variant_id"],
            name=op.f(
                "fk_clinvar_variant_linked_condition_variant_id_variant"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "variant_id",
            "condition_id",
            name=op.f("pk_clinvar_variant_linked_condition"),
        ),
        comment="A record that ClinVar has linked a variant to a condition",
    )
    op.create_index(
        op.f("ix_clinvar_variant_linked_condition_condition_id"),
        "clinvar_variant_linked_condition",
        ["condition_id"],
        unique=False,
    )
    op.create_table(
        "family_member_history",
        sa.Column("family_history_record_id", sa.Integer(), nullable=False),
        sa.Column("kinship_name_id", sa.Integer(), nullable=False),
        sa.Column(
            "has_condition",
            sa.Boolean(),
            nullable=False,
            comment="Does this family member have the condition?",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["family_history_record_id"],
            ["family_history_record.family_history_record_id"],
            name=op.f(
                "fk_family_member_history_family_history_record_id_family_history_record"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["kinship_name_id"],
            ["kinship_name.kinship_name_id"],
            name=op.f("fk_family_member_history_kinship_name_id_kinship_name"),
        ),
        sa.PrimaryKeyConstraint(
            "family_history_record_id",
            "kinship_name_id",
            name=op.f("pk_family_member_history"),
        ),
    )
    op.create_index(
        op.f("ix_family_member_history_kinship_name_id"),
        "family_member_history",
        ["kinship_name_id"],
        unique=False,
    )
    op.create_table(
        "individual_variant",
        sa.Column("individual_id", sa.Integer(), nullable=False),
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column("variant_inheritance_id", sa.Integer(), nullable=True),
        sa.Column("zygosity_id", sa.Integer(), nullable=True),
        sa.Column(
            "extra_information",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.individual_id"],
            name=op.f("fk_individual_variant_individual_id_individual"),
        ),
        sa.ForeignKeyConstraint(
            ["variant_id"],
            ["variant.variant_id"],
            name=op.f("fk_individual_variant_variant_id_variant"),
        ),
        sa.ForeignKeyConstraint(
            ["variant_inheritance_id"],
            ["variant_inheritance.variant_inheritance_id"],
            name=op.f(
                "fk_individual_variant_variant_inheritance_id_variant_inheritance"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["zygosity_id"],
            ["zygosity.zygosity_id"],
            name=op.f("fk_individual_variant_zygosity_id_zygosity"),
        ),
        sa.PrimaryKeyConstraint(
            "individual_id", "variant_id", name=op.f("pk_individual_variant")
        ),
        comment="A mutation that an individual has",
    )
    op.create_index(
        op.f("ix_individual_variant_variant_id"),
        "individual_variant",
        ["variant_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_individual_variant_variant_inheritance_id"),
        "individual_variant",
        ["variant_inheritance_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_individual_variant_zygosity_id"),
        "individual_variant",
        ["zygosity_id"],
        unique=False,
    )
    op.create_table(
        "pathogenicity_prediction",
        sa.Column("predictor_id", sa.Integer(), nullable=False),
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column("prediction", sa.String(), nullable=True),
        sa.Column("score", sa.Float(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "prediction IS NOT NULL OR score IS NOT NULL",
            name=op.f(
                "ck_pathogenicity_prediction_prediction_or_score_not_null"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["predictor_id"],
            ["pathogenicity_predictor.predictor_id"],
            name=op.f(
                "fk_pathogenicity_prediction_predictor_id_pathogenicity_predictor"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["variant_id"],
            ["variant.variant_id"],
            name=op.f("fk_pathogenicity_prediction_variant_id_variant"),
        ),
        sa.PrimaryKeyConstraint(
            "predictor_id",
            "variant_id",
            name=op.f("pk_pathogenicity_prediction"),
        ),
        comment="VUS predictor models",
    )
    op.create_index(
        op.f("ix_pathogenicity_prediction_variant_id"),
        "pathogenicity_prediction",
        ["variant_id"],
        unique=False,
    )
    op.create_table(
        "publication_variant",
        sa.Column("publication_id", sa.Integer(), nullable=False),
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["publication_id"],
            ["publication.publication_id"],
            name=op.f("fk_publication_variant_publication_id_publication"),
        ),
        sa.ForeignKeyConstraint(
            ["variant_id"],
            ["variant.variant_id"],
            name=op.f("fk_publication_variant_variant_id_variant"),
        ),
        sa.PrimaryKeyConstraint(
            "publication_id", "variant_id", name=op.f("pk_publication_variant")
        ),
        comment="Link between a publication and a variant",
    )
    op.create_index(
        op.f("ix_publication_variant_variant_id"),
        "publication_variant",
        ["variant_id"],
        unique=False,
    )
    op.create_table(
        "variant_clinvar_info",
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column(
            "variation_clinvar_id",
            sa.Integer(),
            nullable=False,
            comment="Variation ID from ClinVar. Used to link to the ClinVar website",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["variant_id"],
            ["variant.variant_id"],
            name=op.f("fk_variant_clinvar_info_variant_id_variant"),
        ),
        sa.PrimaryKeyConstraint(
            "variant_id", name=op.f("pk_variant_clinvar_info")
        ),
        sa.UniqueConstraint(
            "variation_clinvar_id",
            name=op.f("uq_variant_clinvar_info_variation_clinvar_id"),
        ),
        comment="Information about a variant if it is from ClinVar",
    )
    op.create_table(
        "variants_dataset_to_variant",
        sa.Column("dataset_id", sa.Integer(), nullable=False),
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["variants_dataset.dataset_id"],
            name=op.f(
                "fk_variants_dataset_to_variant_dataset_id_variants_dataset"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["variant_id"],
            ["variant.variant_id"],
            name=op.f("fk_variants_dataset_to_variant_variant_id_variant"),
        ),
        sa.PrimaryKeyConstraint(
            "dataset_id",
            "variant_id",
            name=op.f("pk_variants_dataset_to_variant"),
        ),
        comment="Link between a dataset and a variant",
    )
    op.create_index(
        op.f("ix_variants_dataset_to_variant_variant_id"),
        "variants_dataset_to_variant",
        ["variant_id"],
        unique=False,
    )
    op.create_table(
        "individual_variant_condition_link",
        sa.Column("individual_id", sa.Integer(), nullable=False),
        sa.Column("variant_id", sa.Integer(), nullable=False),
        sa.Column("condition_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["individual_id", "condition_id"],
            [
                "individual_condition.individual_id",
                "individual_condition.condition_id",
            ],
            name="fk_pmcl_individual_id_condition_id_individual_variant",
        ),
        sa.ForeignKeyConstraint(
            ["individual_id", "variant_id"],
            [
                "individual_variant.individual_id",
                "individual_variant.variant_id",
            ],
            name="fk_pmcl_individual_id_variant_id_individual_variant",
        ),
        sa.PrimaryKeyConstraint(
            "individual_id",
            "variant_id",
            "condition_id",
            name=op.f("pk_individual_variant_condition_link"),
        ),
        comment="A record that an individual has a variant that is linked to one of their recorded conditions",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # DROP ALL VIEWS AND MATERIALIZED VIEWS
    op.execute(
        """
            DROP MATERIALIZED VIEW IF EXISTS variant_num_individuals_mv CASCADE;
        """
    )

    op.execute(
        """
            DROP VIEW IF EXISTS variant_to_exon_v CASCADE;
            """
    )

    op.execute(
        """
        DROP VIEW IF EXISTS p_variant_to_structure_v CASCADE;
        """
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("individual_variant_condition_link")
    op.drop_index(
        op.f("ix_variants_dataset_to_variant_variant_id"),
        table_name="variants_dataset_to_variant",
    )
    op.drop_table("variants_dataset_to_variant")
    op.drop_table("variant_clinvar_info")
    op.drop_index(
        op.f("ix_publication_variant_variant_id"),
        table_name="publication_variant",
    )
    op.drop_table("publication_variant")
    op.drop_index(
        op.f("ix_pathogenicity_prediction_variant_id"),
        table_name="pathogenicity_prediction",
    )
    op.drop_table("pathogenicity_prediction")
    op.drop_index(
        op.f("ix_individual_variant_zygosity_id"),
        table_name="individual_variant",
    )
    op.drop_index(
        op.f("ix_individual_variant_variant_inheritance_id"),
        table_name="individual_variant",
    )
    op.drop_index(
        op.f("ix_individual_variant_variant_id"),
        table_name="individual_variant",
    )
    op.drop_table("individual_variant")
    op.drop_index(
        op.f("ix_family_member_history_kinship_name_id"),
        table_name="family_member_history",
    )
    op.drop_table("family_member_history")
    op.drop_index(
        op.f("ix_clinvar_variant_linked_condition_condition_id"),
        table_name="clinvar_variant_linked_condition",
    )
    op.drop_table("clinvar_variant_linked_condition")
    op.drop_index(op.f("ix_variant_sequence_variant_id"), table_name="variant")
    op.drop_index(
        op.f("ix_variant_clinical_significance_id"), table_name="variant"
    )
    op.drop_table("variant")
    op.drop_index(
        op.f("ix_treatment_record_treatment_id"), table_name="treatment_record"
    )
    op.drop_table("treatment_record")
    op.drop_index(
        op.f("ix_individual_to_publication_publication_id"),
        table_name="individual_to_publication",
    )
    op.drop_table("individual_to_publication")
    op.drop_table("individual_original_excel_row")
    op.drop_index(
        op.f("ix_individual_condition_condition_id"),
        table_name="individual_condition",
    )
    op.drop_index(
        op.f("ix_individual_condition_age_of_presentation"),
        table_name="individual_condition",
    )
    op.drop_index(
        op.f("ix_individual_condition_age_of_onset"),
        table_name="individual_condition",
    )
    op.drop_table("individual_condition")
    op.drop_index(
        op.f("ix_family_history_record_condition_id"),
        table_name="family_history_record",
    )
    op.drop_table("family_history_record")
    op.drop_index(
        op.f("ix_structure_root_to_protein_protein_id"),
        table_name="structure_root_to_protein",
    )
    op.drop_table("structure_root_to_protein")
    op.drop_index(op.f("ix_structure_root_id"), table_name="structure")
    op.drop_index(
        "ix_structure_residue_span",
        table_name="structure",
        postgresql_using="gist",
    )
    op.drop_index(op.f("ix_structure_parent_id"), table_name="structure")
    op.drop_table("structure")
    op.drop_index(
        op.f("ix_sequence_variant_p_reference_sequence_id"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_p_posedit_str"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_p_hgvs_string"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_p_edit_type"), table_name="sequence_variant"
    )
    op.drop_index(
        op.f("ix_sequence_variant_g_reference_sequence_id"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_g_posedit_str"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_g_hgvs_string"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_g_edit_type"), table_name="sequence_variant"
    )
    op.drop_index(
        op.f("ix_sequence_variant_g_edit_ref"), table_name="sequence_variant"
    )
    op.drop_index(
        op.f("ix_sequence_variant_g_edit_alt"), table_name="sequence_variant"
    )
    op.drop_index(
        op.f("ix_sequence_variant_c_reference_sequence_id"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_c_posedit_str"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_c_hgvs_string"),
        table_name="sequence_variant",
    )
    op.drop_index(
        op.f("ix_sequence_variant_c_edit_type"), table_name="sequence_variant"
    )
    op.drop_index(
        op.f("ix_sequence_variant_c_edit_ref"), table_name="sequence_variant"
    )
    op.drop_index(
        op.f("ix_sequence_variant_c_edit_alt"), table_name="sequence_variant"
    )
    op.drop_index(
        "idx_sequence_variant_p_pos_interval",
        table_name="sequence_variant",
        postgresql_using="gist",
    )
    op.drop_index(
        "idx_sequence_variant_g_pos_interval",
        table_name="sequence_variant",
        postgresql_using="gist",
    )
    op.drop_index(
        "idx_sequence_variant_c_pos_interval",
        table_name="sequence_variant",
        postgresql_using="gist",
    )
    op.drop_table("sequence_variant")
    op.drop_index(
        op.f("ix_individual_individual_sex_id"), table_name="individual"
    )
    op.drop_table("individual")
    op.drop_index(
        op.f("ix_condition_synonym_condition_id"),
        table_name="condition_synonym",
    )
    op.drop_table("condition_synonym")
    op.drop_table("zygosity")
    op.drop_table("variants_dataset")
    op.drop_table("variant_inheritance")
    op.drop_table("treatment")
    op.drop_table("structure_root")
    op.drop_table("publication")
    op.drop_table("pathogenicity_predictor")
    op.drop_table("kinship_name")
    op.drop_table("individual_sex")
    op.drop_table("edit_type")
    op.drop_table("condition")
    op.drop_table("clinical_significance")
    # ### end Alembic commands ###
